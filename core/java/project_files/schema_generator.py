# schema_generator.py

import os
from utils.logger import get_logger

logger = get_logger(__name__)

type_mapping = {
    "string": "VARCHAR(255)",
    "int": "INT",
    "float": "FLOAT",
    "boolean": "BOOLEAN",
    "date": "DATE",
    "datetime": "TIMESTAMP",
    "long": "BIGINT",
    "double": "DOUBLE"
}

def generate_schema_sql(entities, output_dir, app_name, version):
    try:
        logger.info("Generating SQL schema...")

        ddl_statements = []
        relationships = []

        for entity in entities:
            table_name = entity["name"].lower()
            fields = entity["fields"]
            ddl = f"CREATE TABLE {table_name} ("
            ddl_lines = []

            for field in fields:
                name = field["name"]
                ftype = type_mapping.get(field["type"], "VARCHAR(255)")
                nullable = "NULL" if field.get("nullable", True) else "NOT NULL"
                primary = "PRIMARY KEY" if field.get("primary_key", False) else ""

                ddl_lines.append(f"    {name} {ftype} {nullable} {primary}".strip())

            ddl += ",\n".join(ddl_lines)
            ddl += "\n);"
            ddl_statements.append(ddl)

            # Handle relationships separately (foreign keys, join tables)
            if "relationships" in entity:
                for rel in entity["relationships"]:
                    rel_type = rel["type"]
                    target = rel["target"]
                    source_field = rel.get("source_field", f"{target.lower()}_id")
                    target_field = rel.get("target_field", "id")

                    if rel_type in ["one-to-one", "many-to-one"]:
                        alter = (f"ALTER TABLE {table_name} ADD COLUMN {source_field} INT,\n"
                                 f"ADD CONSTRAINT fk_{table_name}_{target.lower()} FOREIGN KEY ({source_field})\n"
                                 f"REFERENCES {target.lower()}({target_field});")
                        relationships.append(alter)

                    elif rel_type == "many-to-many":
                        join_table = f"{table_name}_{target.lower()}"
                        join = (
                            f"CREATE TABLE {join_table} (\n"
                            f"    {table_name}_id INT NOT NULL,\n"
                            f"    {target.lower()}_id INT NOT NULL,\n"
                            f"    PRIMARY KEY ({table_name}_id, {target.lower()}_id),\n"
                            f"    FOREIGN KEY ({table_name}_id) REFERENCES {table_name}(id),\n"
                            f"    FOREIGN KEY ({target.lower()}_id) REFERENCES {target.lower()}(id)\n"
                            f");"
                        )
                        relationships.append(join)

        # Output file
        schema_dir = os.path.join(output_dir, "src", "main", "resources", "db", "schema")
        os.makedirs(schema_dir, exist_ok=True)
        file_name = f"create_tables.sql"
        file_path = os.path.join(schema_dir, file_name)

        with open(file_path, "w") as f:
            f.write("-- Schema generated by GenApp\n\n")
            for ddl in ddl_statements:
                f.write(ddl + "\n\n")
            for rel in relationships:
                f.write(rel + "\n\n")

        logger.info(f"✅ Schema file generated at: {file_path}")
    except Exception as e:
        logger.error(f"❌ Failed to generate schema file: {str(e)}")
        raise